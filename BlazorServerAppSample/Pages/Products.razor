<h3>Products</h3>
@page "/prod"

@inject Services.ProductService ProdService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
<h3>Add/Edit Task</h3>

<div class="form">
    <div class="form-group">
        <label for="title">Product Name:</label>
        <input type="hidden" id="prodId" @bind="newProd.Id" />
        <input class="form-control" id="title" @bind="newProd.ProdName" />
    </div>
    <div class="form-group">
        <label for="title">Product Price:</label>
        <input class="form-control" id="title" @bind="newProd.ProdPrice" />
    </div>
    <div class="form-group">
        <button class="btn btn-success" @onclick="SaveProduct">Save</button>
        <button class="btn btn-success" @onclick="Clear">Clear</button>
    </div>
</div>

@if (productsToDisplay.Count() > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var prod in productsToDisplay)
            {
                <tr>
                    <td>@prod.Id</td>
                    <td>@prod.ProdName</td>
                    <td>@prod.ProdPrice</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditProd(prod.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => ConfirmDeleteProd(prod.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="pagination">
        <button class="btn btn-secondary" disabled="@IsFirstPage" @onclick="GoToPreviousPage">Previous</button>
        <span>Page @currentPage of @totalPages</span>
        <button class="btn btn-secondary" disabled="@IsLastPage" @onclick="GoToNextPage">Next</button>
    </div>
}
else
{
    <p>No product available.</p>
}

<br />
<a href="#" @onclick="ViewEmployee">View Employee</a>
@code {
    private List<Models.ProductModel> products = new List<Models.ProductModel>();
    private IEnumerable<Models.ProductModel> productsToDisplay = new List<Models.ProductModel>();
    private Models.ProductModel newProd = new Models.ProductModel();

    private int currentPage = 1;
    private int itemsPerPage = 2; // Adjust as needed
    private int totalItems;
    private bool IsFirstPage => currentPage == 1;
    private bool IsLastPage => currentPage == totalPages;

    private int totalPages => (int)Math.Ceiling((double)totalItems / itemsPerPage);

    private void GoToPreviousPage()
    {

        if (!IsFirstPage)
        {
            currentPage--;
            RefreshTaskList();
        }
    }
    private void GoToNextPage()
    {
        if (!IsLastPage)
        {
            currentPage++;
            RefreshTaskList();
        }
    }
    private void RefreshTaskList()
    {
        // Recalculate the displayedTasks based on the currentPage
        productsToDisplay = products
            .Skip((currentPage - 1) * itemsPerPage)
            .Take(itemsPerPage);
    }
    private void ViewEmployee()
    {
        Navigation.NavigateTo("/emp");
    }
    protected override void OnInitialized()
    {
        // Load tasks when the page is initialized
        products = ProdService.GetProducts();
        totalItems = products.Count;
        productsToDisplay = products.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage);
    }

    private void EditProd(int prodId)
    {
        newProd = ProdService.GetProduct(prodId);
    }

    private void SaveProduct()
    {
        if (string.IsNullOrWhiteSpace(newProd.ProdName))
        {
            // You can add validation here, for example, to ensure the title is not empty.
            // You may want to display an error message to the user.
            return;
        }

        if (newProd.Id == 0)
        {
            // If the task's ID is 0, it means it's a new task, so add it.
            ProdService.AddProducts(newProd);
        }
        else
        {
            // If the task has a non-zero ID, it means it's an existing task, so update it.
            ProdService.UpdateProduct(newProd);
        }

        // Clear the newTask object and refresh the task list.
        newProd = new Models.ProductModel();
        products = ProdService.GetProducts();
        totalItems = products.Count;
        productsToDisplay = products.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage);

        newProd = new Models.ProductModel();
    }
    private void Clear()
    {
        newProd = new Models.ProductModel();
    }
    private int prodIdToDelete;

    private async Task ConfirmDeleteProd(int prodId)
    {
        prodIdToDelete = prodId;

        // Display a confirmation dialog
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this product?");

        if (confirmed)
        {
            // User confirmed, proceed with the deletion
            DeleteProduct(prodIdToDelete);
        }
        else
        {
            // User canceled, do nothing or provide feedback as needed
        }
    }

    private void DeleteProduct(int prodId)
    {
        // Implement the logic to delete a task
        ProdService.DeleteProduct(prodId);
        // Refresh the task list
        products = ProdService.GetProducts();
        totalItems = products.Count;
        productsToDisplay = products.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage);
    }
}