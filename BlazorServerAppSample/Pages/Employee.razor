@page "/emp/{id?}";
@inject Services.EmployeeService EmpService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<h3>Add/Edit Employee</h3>

<div class="form">
    <div class="form-group">
        <label for="title">Employee Name:</label>
        <input type="hidden" id="empId" @bind="newEmp.Id" />
        <input class="form-control" id="title" @bind="newEmp.EmpName" />
    </div>
    <div class="form-group">
        <label for="title">Employee City:</label>
        <input class="form-control" id="title" @bind="newEmp.EmpCity" />
    </div>
    <br />
    <div class="form-group">
        <button class="btn btn-success" @onclick="SaveEmployee">Save</button>
        <button class="btn btn-success" @onclick="Clear">Clear</button>
    </div>
</div>


@if (employeeToDisplay.Count()>0)
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var emp in employeeToDisplay)
            {
                <tr>
                    <td>@emp.Id</td>
                    <td>@emp.EmpName</td>
                    <td>@emp.EmpCity</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditEmp(emp.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => ConfirmDeleteEmp(emp.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="pagination">
        <button class="btn btn-secondary" disabled="@IsFirstPage" @onclick="GoToPreviousPage">Previous</button>
        <span>Page @currentPage of @totalPages</span>
        <button class="btn btn-secondary" disabled="@IsLastPage" @onclick="GoToNextPage">Next</button>
    </div>
}
else
{
    <p>No employee available.</p>
}

<br />
<a href="#" @onclick="ViewProducts">View Products</a>
@code {
    private List<Models.EmployeeModel> employee = new List<Models.EmployeeModel>();
    private IEnumerable<Models.EmployeeModel> employeeToDisplay = new List<Models.EmployeeModel>();
    private Models.EmployeeModel newEmp = new Models.EmployeeModel();

    private int currentPage = 1;
    private int itemsPerPage = 3; // Adjust as needed
    private int totalItems;
    private bool IsFirstPage => currentPage == 1;
    private bool IsLastPage => currentPage == totalPages;

    private int totalPages => (int)Math.Ceiling((double)totalItems / itemsPerPage);

    private void GoToPreviousPage()
    {

        if (!IsFirstPage)
        {
            currentPage--;
            RefreshTaskList();
        }
    }
    private void GoToNextPage()
    {
        if (!IsLastPage)
        {
            currentPage++;
            RefreshTaskList();
        }
    }
    private void RefreshTaskList()
    {
        // Recalculate the displayedTasks based on the currentPage
        employeeToDisplay = employee
            .Skip((currentPage - 1) * itemsPerPage)
            .Take(itemsPerPage);
    }
    [Parameter]
    public string id { get; set; }
    protected override void OnInitialized()
    {
        // Load tasks when the page is initialized
        int? ids =Convert.ToInt32(id);
        employee = EmpService.GetEmployee();
        totalItems = employee.Count;
        employeeToDisplay = employee.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage);
    }
    private void ViewProducts()
    {
        Navigation.NavigateTo("/prod"); // Navigate to the URL of Page 2
    }
    private void EditEmp(int empId)
    {
        newEmp = EmpService.GetEmployee(empId);
    }

    private void SaveEmployee()
    {
        if (string.IsNullOrWhiteSpace(newEmp.EmpName))
        {
            // You can add validation here, for example, to ensure the title is not empty.
            // You may want to display an error message to the user.
            return;
        }

        if (newEmp.Id == 0)
        {
            // If the task's ID is 0, it means it's a new task, so add it.
            EmpService.AddEmployee(newEmp);
        }
        else
        {
            // If the task has a non-zero ID, it means it's an existing task, so update it.
            EmpService.UpdateEmployee(newEmp);
        }

        // Clear the newTask object and refresh the task list.
        newEmp = new Models.EmployeeModel();
        employee = EmpService.GetEmployee();
        totalItems = employee.Count;
        employeeToDisplay = employee.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage);

        newEmp = new Models.EmployeeModel();
    }
    private void Clear()
    {
        newEmp = new Models.EmployeeModel();
    }
    private int empIdToDelete;

    private async Task ConfirmDeleteEmp(int empId)
    {
        empIdToDelete = empId;

        // Display a confirmation dialog
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this employee?");

        if (confirmed)
        {
            // User confirmed, proceed with the deletion
            DeleteEmployee(empIdToDelete);
        }
        else
        {
            // User canceled, do nothing or provide feedback as needed
        }
    }

    private void DeleteEmployee(int empId)
    {
        // Implement the logic to delete a task
        EmpService.DeleteEmployee(empId);
        // Refresh the task list
        employee = EmpService.GetEmployee();
        totalItems = employee.Count;
        employeeToDisplay = employee.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage);
    }
}